name: Deploy
on:
  workflow_call:
    inputs:
      env:
        required: true
        type: string
        description: 'Kubernetes cluster environment'
      region:
        required: false
        type: string
        default: 'us-east-1'
        description: 'AWS region'
      tag:
        required: true
        type: string
        description: 'Image tag (semVer)'
      registry:
        required: true
        type: string
        description: 'Image registry name'
      chart_path:
        required: false
        type: string
        default: 'chart'
        description: 'Helm chart path'
      chart_name:
        required: true
        type: string
        description: 'Helm chart name'
      chart_namespace:
        required: true
        type: string
        description: 'Helm chart namespace'
      helm_ext_args:
        required: false
        type: string
        default: ''
        description: 'Extra arguments for helm-update command'
      helm_inject_standard_deploy_values:
        required: false
        type: string
        default: 'true'
        description: 'Inject the standard imageName, imageTag, and deployment.region values via --set-string'
      helm_timeout:
        required: false
        type: string
        default: '5m'
        description: 'Extra arguments to specify timeout for help upgrades'

    secrets:
      API_TOKEN_GITHUB:
        required: true
        description: 'Github token hash'
      ORG_AWS_ACCESS_KEY_ID:
        required: true
        description: 'AWS access key id'
      ORG_AWS_SECRET_ACCESS_KEY:
        required: true
        description: 'AWS secret access key id'
      ORG_KUBECONFIG_DEV:
        required: true
        description: 'Kubeconfig secret'
      ORG_KUBECONFIG_DEV_EU_WEST_1:
        required: false
        description: 'Kubeconfig secret'
      ORG_KUBECONFIG_DEV_US_WEST_2:
        required: false
        description: 'Kubeconfig secret'
      ORG_KUBECONFIG_DEV_AP_SOUTHEAST_2:
        required: false
        description: 'Kubeconfig secret'
      ORG_KUBECONFIG_PROD:
        required: true
        description: 'Kubeconfig secret'
      ORG_KUBECONFIG_PROD_EU_WEST_1:
        required: false
        description: 'Kubeconfig secret'
      ORG_KUBECONFIG_PROD_US_WEST_2:
        required: false
        description: 'Kubeconfig secret'
      ORG_KUBECONFIG_PROD_EU_CENTRAL_1:
        required: false
        description: 'Kubeconfig secret'
      ORG_KUBECONFIG_DEV_EU_CENTRAL_1:
        required: false
        description: 'Kubeconfig secret'
      ORG_KUBECONFIG_STAGE:
        required: false
        description: 'Kubeconfig secret'
      ORG_KUBECONFIG_PROD_AP_SOUTHEAST_2:
        required: false
        description: 'Kubeconfig secret'
      ORG_KUBECONFIG_PROD_US_EAST_2:
        required: false
        description: 'Kubeconfig secret'
      ORG_KUBECONFIG_PROD_AP_SOUTHEAST_1:
        required: false
        description: 'Kubeconfig secret'
      ORG_KUBECONFIG_PROD_AP_NORTHEAST_1:
        required: false
        description: 'Kubeconfig secret'
      ORG_KUBECONFIG_PROD_EU_WEST_2:
        required: false
        description: 'Kubeconfig secret'
      ORG_KUBECONFIG_PROD_CA_CENTRAL_1:
        required: false
        description: 'Kubeconfig secret'
      ORG_KUBECONFIG_PROD_SA_EAST_1:
        required: false
        description: 'Kubeconfig secret'
      ORG_KUBECONFIG_PROD_AP_SOUTH_1:
        required: false
        description: 'Kubeconfig secret'
      ORG_KUBECONFIG_DEV_AZ_EASTUS:
        required: false
        description: 'Kubeconfig secret'
jobs:
  # Deploy by one region
  deploy_on_region:
    if: inputs.region != 'all'
    runs-on: ${{ inputs.env }}-${{ inputs.region }}
    name: Deploy ${{ inputs.env }}-${{ inputs.region }}@${{ inputs.tag }}
    steps:

    - name: Setup | Checkout submodules
      uses: actions/checkout@v5
      with:
        submodules: true
        token: ${{ secrets.API_TOKEN_GITHUB }}

    - name: ECR and k8s login
      uses: timescale/cloud-actions/ecr-k8s-login@main
      env:
        ORG_KUBECONFIG_DEV: ${{ secrets.ORG_KUBECONFIG_DEV }}
        ORG_KUBECONFIG_PROD: ${{ secrets.ORG_KUBECONFIG_PROD }}
        ORG_KUBECONFIG_PROD_EU_WEST_1: ${{ secrets.ORG_KUBECONFIG_PROD_EU_WEST_1 }}
        ORG_KUBECONFIG_PROD_US_WEST_2: ${{ secrets.ORG_KUBECONFIG_PROD_US_WEST_2 }}
        ORG_KUBECONFIG_DEV_EU_CENTRAL_1: ${{ secrets.ORG_KUBECONFIG_DEV_EU_CENTRAL_1 }}
        ORG_KUBECONFIG_PROD_EU_CENTRAL_1: ${{ secrets.ORG_KUBECONFIG_PROD_EU_CENTRAL_1 }}
        ORG_KUBECONFIG_PROD_AP_SOUTHEAST_2: ${{ secrets.ORG_KUBECONFIG_PROD_AP_SOUTHEAST_2 }}
        ORG_KUBECONFIG_PROD_US_EAST_2: ${{ secrets.ORG_KUBECONFIG_PROD_US_EAST_2 }}
        ORG_KUBECONFIG_PROD_AP_SOUTHEAST_1: ${{ secrets.ORG_KUBECONFIG_PROD_AP_SOUTHEAST_1 }}
        ORG_KUBECONFIG_PROD_AP_NORTHEAST_1: ${{ secrets.ORG_KUBECONFIG_PROD_AP_NORTHEAST_1 }}
        ORG_KUBECONFIG_PROD_EU_WEST_2: ${{ secrets.ORG_KUBECONFIG_PROD_EU_WEST_2 }}
        ORG_KUBECONFIG_PROD_CA_CENTRAL_1: ${{ secrets.ORG_KUBECONFIG_PROD_CA_CENTRAL_1 }}
        ORG_KUBECONFIG_PROD_SA_EAST_1: ${{ secrets.ORG_KUBECONFIG_PROD_SA_EAST_1 }}
        ORG_KUBECONFIG_PROD_AP_SOUTH_1: ${{ secrets.ORG_KUBECONFIG_PROD_AP_SOUTH_1 }}
        ORG_KUBECONFIG_DEV_AZ_EASTUS: ${{ secrets.ORG_KUBECONFIG_DEV_AZ_EASTUS }}
      with:
        aws-access-key-id: ${{ secrets.ORG_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.ORG_AWS_SECRET_ACCESS_KEY }}
        regions: ${{ inputs.region }}
        env:  ${{ inputs.env }}

    - name: Helm Upgrade
      run: |
          region_values=''
          if [[ -e "./${{ inputs.chart_path }}/values/${{ inputs.env }}-${{ inputs.region }}.yaml" ]]; then
            region_values=--values=./${{ inputs.chart_path }}/values/${{ inputs.env }}-${{ inputs.region }}.yaml
          fi
          standard_values=''
          if [[ "${{inputs.helm_inject_standard_deploy_values}}" == "true" ]]; then
            standard_values="--set-string imageName=${{ inputs.registry }} --set-string imageTag=${{ inputs.tag }} --set-string deployment.region=${{ inputs.region }}"
          fi
          helm upgrade ${{ inputs.chart_name }} ${{ inputs.chart_path }} --install --wait --atomic --cleanup-on-fail \
            --kubeconfig=./kubeconfig_${{ inputs.env }}_${{ inputs.region }} \
            --namespace=${{ inputs.chart_namespace }} \
            --create-namespace \
            --values=./${{ inputs.chart_path }}/values/${{ inputs.env }}.yaml \
            --timeout ${{ inputs.helm_timeout }} \
            ${region_values} \
            ${standard_values} \
            ${{ inputs.helm_ext_args }}

  # Prod - Deploy against all the regions specified in strategy.matrix.region
  deploy_all_regions_prod:
    if: inputs.region == 'all' && inputs.env == 'prod'
    strategy:
      max-parallel: 1
      matrix:
        region: [us-east-1, us-west-2, eu-west-1, eu-central-1, ap-southeast-2, us-east-2, ap-southeast-1, ap-northeast-1, eu-west-2, ca-central-1, sa-east-1, ap-south-1]
    runs-on: ${{ inputs.env }}-${{ matrix.region }}
    name: Deploy-all  ${{ inputs.env }}-${{ matrix.region }}@${{ inputs.tag }}
    steps:

    - name: Setup | Checkout submodules
      uses: actions/checkout@v5
      with:
        submodules: true
        token: ${{ secrets.API_TOKEN_GITHUB }}

    - name: ECR and k8s login
      uses: timescale/cloud-actions/ecr-k8s-login@main
      env:
        ORG_KUBECONFIG_PROD: ${{ secrets.ORG_KUBECONFIG_PROD }}
        ORG_KUBECONFIG_PROD_EU_WEST_1: ${{ secrets.ORG_KUBECONFIG_PROD_EU_WEST_1 }}
        ORG_KUBECONFIG_PROD_US_WEST_2: ${{ secrets.ORG_KUBECONFIG_PROD_US_WEST_2 }}
        ORG_KUBECONFIG_PROD_EU_CENTRAL_1: ${{ secrets.ORG_KUBECONFIG_PROD_EU_CENTRAL_1 }}
        ORG_KUBECONFIG_PROD_AP_SOUTHEAST_2: ${{ secrets.ORG_KUBECONFIG_PROD_AP_SOUTHEAST_2 }}
        ORG_KUBECONFIG_PROD_US_EAST_2: ${{ secrets.ORG_KUBECONFIG_PROD_US_EAST_2 }}
        ORG_KUBECONFIG_PROD_AP_SOUTHEAST_1: ${{ secrets.ORG_KUBECONFIG_PROD_AP_SOUTHEAST_1 }}
        ORG_KUBECONFIG_PROD_AP_NORTHEAST_1: ${{ secrets.ORG_KUBECONFIG_PROD_AP_NORTHEAST_1 }}
        ORG_KUBECONFIG_PROD_EU_WEST_2: ${{ secrets.ORG_KUBECONFIG_PROD_EU_WEST_2 }}
        ORG_KUBECONFIG_PROD_CA_CENTRAL_1: ${{ secrets.ORG_KUBECONFIG_PROD_CA_CENTRAL_1 }}
        ORG_KUBECONFIG_PROD_SA_EAST_1: ${{ secrets.ORG_KUBECONFIG_PROD_SA_EAST_1 }}
        ORG_KUBECONFIG_PROD_AP_SOUTH_1: ${{ secrets.ORG_KUBECONFIG_PROD_AP_SOUTH_1 }}
      with:
        aws-access-key-id: ${{ secrets.ORG_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.ORG_AWS_SECRET_ACCESS_KEY }}
        regions: ${{ matrix.region }}
        env:  ${{ inputs.env }}

    - name: Helm Upgrade
      run: |
          echo "####### Helm upgrade for ${{ inputs.env }}_${{ matrix.region }} ####### "
          region_values=''
          if [[ -e "./${{ inputs.chart_path }}/values/${{ inputs.env }}-${{ matrix.region }}.yaml" ]]; then
            region_values=--values=./${{ inputs.chart_path }}/values/${{ inputs.env }}-${{ matrix.region }}.yaml
          fi
          standard_values=''
          if [[ "${{inputs.helm_inject_standard_deploy_values}}" == "true" ]]; then
            standard_values="--set-string imageName=${{ inputs.registry }} --set-string imageTag=${{ inputs.tag }} --set-string deployment.region=${{ matrix.region }}"
          fi
          helm upgrade ${{ inputs.chart_name }} ${{ inputs.chart_path }} --install --wait --atomic --cleanup-on-fail \
            --kubeconfig=./kubeconfig_${{ inputs.env }}_${{ matrix.region }} \
            --namespace=${{ inputs.chart_namespace }} \
            --values=./${{ inputs.chart_path }}/values/${{ inputs.env }}.yaml \
            --timeout ${{ inputs.helm_timeout }} \
            ${region_values} \
            ${standard_values} \
            ${{ inputs.helm_ext_args }}

# Dev - Deploy against all the regions specified in strategy.matrix.region
  deploy_all_regions_dev:
    if: inputs.region == 'all' && inputs.env == 'dev'
    strategy:
      max-parallel: 1
      matrix:
        region: [us-east-1, eu-central-1]
    runs-on: ${{ inputs.env }}-${{ matrix.region }}
    name: Deploy-all  ${{ inputs.env }}-${{ matrix.region }}@${{ inputs.tag }}
    steps:

    - name: Setup | Checkout submodules
      uses: actions/checkout@v5
      with:
        submodules: true
        token: ${{ secrets.API_TOKEN_GITHUB }}

    - name: ECR and k8s login
      uses: timescale/cloud-actions/ecr-k8s-login@main
      env:
        ORG_KUBECONFIG_DEV: ${{ secrets.ORG_KUBECONFIG_DEV }}
        ORG_KUBECONFIG_DEV_EU_CENTRAL_1: ${{ secrets.ORG_KUBECONFIG_DEV_EU_CENTRAL_1 }}
      with:
        aws-access-key-id: ${{ secrets.ORG_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.ORG_AWS_SECRET_ACCESS_KEY }}
        regions: ${{ matrix.region }}
        env:  ${{ inputs.env }}

    - name: Helm Upgrade
      run: |
          echo "####### Helm upgrade for ${{ inputs.env }}_${{ matrix.region }} ####### "
          region_values=''
          if [[ -e "./${{ inputs.chart_path }}/values/${{ inputs.env }}-${{ matrix.region }}.yaml" ]]; then
            region_values=--values=./${{ inputs.chart_path }}/values/${{ inputs.env }}-${{ matrix.region }}.yaml
          fi
          standard_values=''
          if [[ "${{inputs.helm_inject_standard_deploy_values}}" == "true" ]]; then
            standard_values="--set-string imageName=${{ inputs.registry }} --set-string imageTag=${{ inputs.tag }} --set-string deployment.region=${{ matrix.region }}"
          fi
          helm upgrade ${{ inputs.chart_name }} ${{ inputs.chart_path }} --install --wait --atomic --cleanup-on-fail \
            --kubeconfig=./kubeconfig_${{ inputs.env }}_${{ matrix.region }} \
            --namespace=${{ inputs.chart_namespace }} \
            --values=./${{ inputs.chart_path }}/values/${{ inputs.env }}.yaml \
            --timeout ${{ inputs.helm_timeout }} \
            ${region_values} \
            ${standard_values} \
            ${{ inputs.helm_ext_args }}
