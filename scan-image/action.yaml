name: 'Scan Image'
description: 'Scan an image for vulnerabilities'
inputs:
  report-name:
    description: 'Report name'
    required: false
    default: 'trivy-image'
  report-filename:
    description: 'Report filename'
    required: false
    default: 'trivy-image.report'
  registry:
    description: 'ECR image registry'
    required: true
  tag:
    description: 'ECR image tag'
    required: false
    default: ''
  digest:
    description: 'ECR image digest'
    required: false
    default: ''
  report-format:
    description: 'Report format (sarif, json, table)'
    required: false
    default: 'table'
  severity:
    description: 'Severity level (UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL)'
    required: false
    default: 'CRITICAL,HIGH'
  ignore-unfixed:
    description: 'ignore unfixed vulnerabilities'
    required: false
    default: 'true'
  fail-on-vulns:
    description: 'Fail build on found vulnerabilities'
    required: false
    default: 'true'

runs:
  using: "composite"
  steps:
    - name: Validate tag and digest inputs
      shell: bash
      run: |
        if [[ -n "${{ inputs.tag }}" && -n "${{ inputs.digest }}" ]]; then
          echo "Error: Both tag and digest are provided. Please provide either tag or digest, not both."
          exit 1
        fi
          
        if [[ -z "${{ inputs.tag }}" && -z "${{ inputs.digest }}" ]]; then
          echo "Error: Neither tag nor digest is provided. Please provide either tag or digest."
          exit 1
        fi

    - name: Set image reference
      id: set-image-ref
      shell: bash
      run: |
        if [[ -n "${{ inputs.tag }}" ]]; then
          echo "image_ref=${{ inputs.registry }}:${{ inputs.tag }}" >> $GITHUB_OUTPUT
        else
          echo "image_ref=${{ inputs.registry }}@${{ inputs.digest }}" >> $GITHUB_OUTPUT
        fi

    - name: Generate Trivy Vulnerability Report
      uses: aquasecurity/trivy-action@0.29.0
      id: scan
      with:
        scan-type: 'image'
        image-ref: ${{ steps.set-image-ref.outputs.image_ref }}
        output: ${{ inputs.report-filename }}
        format: ${{ inputs.report-format }}
        severity: ${{ inputs.severity }}
        ignore-unfixed: ${{ inputs.ignore-unfixed }}
        exit-code: 1
      continue-on-error: true

    - name: Upload Vulnerability Scan Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.report-name }}
        path: ${{ inputs.report-filename }}
        retention-days: 30

    - name: Fail on vulnerabilities
      if: steps.scan.outcome != 'success' && inputs.fail-on-vulns == 'true'
      shell: bash
      run: exit 1
