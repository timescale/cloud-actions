name: Comment on PR with vulnerabilities
description: "Comment on PR with vulnerabilities scan results"
inputs:
  report-name:
    description: "Report name to download"
    required: true
  report-filename:
    description: "Report filename in report archive"
    required: true
  comment-identifier:
    description: "Comment identifier"
    required: false
    default: 'SECURITY_SCAN_RESULTS_IDENTIFIER'
  pull-request-number:
    description: "Pull request number"
    required: false

runs:
  using: "composite"
  steps:
    - name: Download vulnerability report
      uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.report-name }}
        path: ./vulnerability-reports

    - name: Update or create PR comment with vulnerabilities
      uses: actions/github-script@v6
      with:
        script: |
          // Pre-flight checks: we need to ensure that either pull request number is provided by inputs 
          // or the action is running in pull request context
          const pullRequestNumber = '${{ inputs.pull-request-number }}' || context.issue.number;
          if (!pullRequestNumber) {
            core.setFailed('No pull request number provided and not running in a pull request context');
            return;
          };
          
          const fs = require('fs');
          const reportContent = fs.readFileSync('./vulnerability-reports/${{ inputs.report-filename }}', 'utf8');
          
          // Check if vulnerabilities were found
          let hasVulnerabilities = false;
          
          try {
            // Try to parse as JSON first (could be standard JSON format or SARIF)
            const jsonReport = JSON.parse(reportContent);
          
            // Check if it's SARIF format (has $schema or version fields and runs array)
            if ((jsonReport.$schema && jsonReport.$schema.includes('sarif')) || 
                (jsonReport.version && jsonReport.runs)) {
              // SARIF format - check runs[].results array
              hasVulnerabilities = jsonReport.runs && 
                                  jsonReport.runs.some(run => 
                                    run.results && run.results.length > 0
                                  );
            } 
            // Check if it's Trivy JSON format
            else if (jsonReport.Results) {
              // For Trivy JSON format, check if any Results have Vulnerabilities
              hasVulnerabilities = jsonReport.Results.some(result => 
                result.Vulnerabilities && result.Vulnerabilities.length > 0
              );
            }
          } catch (e) {
            // Not JSON format, assume text/table format
            // Find all "Total: N" occurrences and check if any N > 0
            const totalMatches = reportContent.match(/Total:\s+(\d+)/g) || [];
            hasVulnerabilities = totalMatches.some(match => {
              const count = parseInt(match.replace('Total:', '').trim());
              return count > 0;
            });
          }
          
          // Get the correct commit SHA - use PR head SHA if available
          let commitSha;
          if (context.payload.pull_request) {
            commitSha = context.payload.pull_request.head.sha;
          } else {
            commitSha = context.sha;
          }
          let commentBody;
          
          if (hasVulnerabilities) {
            // If vulnerabilities were found, include the full report
            commentBody = `<!-- ${{ inputs.comment-identifier }} -->
            ## ⚠️ Security Scan Results

            Vulnerabilities were detected in the security scan.

            <details>
            <summary>Click to expand vulnerability report</summary>

            \`\`\`
            ${reportContent}
            \`\`\`

            </details>
            
            Scanning was performed on commit: ${commitSha.substring(0, 7)}.
            `;
          } else {
            // If no vulnerabilities were found, just indicate success
            commentBody = `<!-- ${{ inputs.comment-identifier }} -->
            ## ✅ Security Scan Results

            Security scan completed successfully. No vulnerabilities were found!
            
            Scanning was performed on commit: ${commitSha.substring(0, 7)}.
            `;
          }
          
          // Get all comments on the PR
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: pullRequestNumber,
          });
          
          // Look for our specific comment using the identifier
          const botComment = comments.find(comment => {
            return comment.body.includes('${{ inputs.comment-identifier }}');
          });
          
          if (botComment) {
            // If comment exists, update it
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: commentBody
            });
            console.log(`Updated existing comment ID ${botComment.id}`);
          } else {
            // If comment doesn't exist, create a new one
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pullRequestNumber,
              body: commentBody
            });
            console.log('Created new comment');
          }
