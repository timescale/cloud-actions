name: Scan Image and Provide Report
description: 'Scan an image for vulnerabilities and provide a report'
inputs:
  report-name:
    description: 'Report name'
    required: true
  report-filename:
    description: 'Report filename'
    required: true
  identifier:
    description: 'Issue/Comment identifier'
    required: true
  registry:
    description: 'ECR image repository'
    required: true
  tags:
    description: 'List of image tag'
    required: false
    default: ''
  digest:
    description: 'Image digest'
    required: false
    default: ''
  report-format:
    description: 'Report format (sarif, json, table)'
    required: false
    default: 'table'
  severity:
    description: 'Severity level (UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL)'
    required: false
    default: 'CRITICAL,HIGH'
  fail-on-vulns:
    description: 'Fail build on found vulnerabilities'
    required: false
    default: 'true'
  ignore-unfixed:
    description: 'Ignore unfixed vulnerabilities'
    required: false
    default: 'true'


runs:
  using: "composite"
  steps:
    - name: Validate inputs
      shell: bash
      run: |
        # Check if both tags and digest are provided or neither is provided
        if [[ -n "${{ inputs.tags }}" && -n "${{ inputs.digest }}" ]]; then
          echo "Error: Both tags and digest are provided. Please provide either tags or digest, not both."
          exit 1
        fi
  
        if [[ -z "${{ inputs.tags }}" && -z "${{ inputs.digest }}" ]]; then
          echo "Error: Neither tags nor digest is provided. Please provide either tags or digest."
          exit 1
        fi

    - name: Process Inputs and set image reference
      id: process-input
      shell: bash
      run: |
        if [[ -n "${{ inputs.tags }}" ]]; then
          # Convert multi-line or comma-separated input to an array
          IFS=$'\n,' read -ra TAGS <<< "${{ inputs.tags }}"

          # Use the first tag as a primary tag for reports
          echo "image_ref=${{ inputs.registry }}:${TAGS[0]}" >> $GITHUB_OUTPUT
        else
          # Using digest
          echo "image_ref=${{ inputs.registry }}@${{ inputs.digest }}" >> $GITHUB_OUTPUT
        fi

    - uses: timescale/cloud-actions/scan-image@978ee6ddcc5358509a380fb58e5d63f300633c41
      name: Scan Image for Vulnerabilities
      id: scan
      with:
        report-name: ${{ inputs.report-name }}
        report-filename: ${{ inputs.report-filename }}
        image-ref: ${{ steps.process-input.outputs.image_ref }}
        report-format: ${{ inputs.report-format }}
        severity: ${{ inputs.severity }}
        fail-on-vulns: ${{ inputs.fail-on-vulns }}
        ignore-unfixed: ${{ inputs.ignore-unfixed }}
      continue-on-error: true

    # Determine if a pull request exists
    - uses: timescale/cloud-actions/find-pr@978ee6ddcc5358509a380fb58e5d63f300633c41
      name: Find Pull Request
      id: find-pr

    # Comment on the pull request if it exists
    - uses: timescale/cloud-actions/scan-comment-pr@978ee6ddcc5358509a380fb58e5d63f300633c41
      name: Comment on Pull Request
      if: steps.find-pr.outputs.has_pr == 'true'
      with:
        report-name: ${{ inputs.report-name }}
        report-filename: ${{ inputs.report-filename }}
        pull-request-number: ${{ steps.find-pr.outputs.pr_number }}
        comment-identifier: ${{ inputs.identifier }}

    # Create an issue if no pull request exists
    - uses: timescale/cloud-actions/scan-create-issue@978ee6ddcc5358509a380fb58e5d63f300633c41
      name: Create Issue
      if: steps.find-pr.outputs.has_pr == 'false'
      with:
        report-name: ${{ inputs.report-name }}
        report-filename: ${{ inputs.report-filename }}
        issue-identifier: ${{ inputs.identifier }}
